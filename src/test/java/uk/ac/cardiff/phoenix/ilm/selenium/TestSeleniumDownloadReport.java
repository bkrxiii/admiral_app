package uk.ac.cardiff.phoenix.ilm.selenium;// Generated by Selenium IDE


import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.test.annotation.DirtiesContext;

import java.io.File;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class TestSeleniumDownloadReport {
    private WebDriver driver;
    @LocalServerPort
    private int port;
    private File[] files;
    private String url;

    private String downloadPath;

    @BeforeEach
    public void setup() {
        url = "http://localhost:" + port + "/";
        WebDriverManager.chromedriver().setup();

        // create a downloads directory in build folder if it doesn't exist
        downloadPath = System.getProperty("user.dir") + File.separator + "build" + File.separator + "downloads";
        File downloadDir = new File(downloadPath);
        if (!downloadDir.exists()) {
            downloadDir.mkdirs(); // This will create the directory if it doesn't exist
        }

        // make sure download directory is empty
        files = downloadDir.listFiles();
        if (files != null) {
            for (File file : files) {
                file.delete();
            }
        }

        // set-up chrome driver to use this download directory
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless");
        Map<String, Object> prefs = new HashMap<>();
        prefs.put("download.default_directory", downloadPath);
        options.setExperimentalOption("prefs", prefs);
        driver = new ChromeDriver(options);

    }

    @AfterEach
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }

        // Empty download folder after test
        File downloadDir = new File(downloadPath);
        files = downloadDir.listFiles();
        if (files != null) {
            for (File file : files) {
                file.delete();
            }
        }
    }

    @Test
    @DirtiesContext
    public void downloadReport() {
        driver.get(url);
        driver.manage().window().setSize(new Dimension(1530, 807));
        driver.findElement(By.linkText("log in")).click();
        driver.findElement(By.id("username")).sendKeys("admin@example.com");
        driver.findElement(By.id("password")).sendKeys("passwordthatchromewillsave");
        driver.findElement(By.cssSelector(".btn")).click();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // wait for up to 10 seconds
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText("Admin"))).click(); // Wait for "Admin" link to appear and then click it



        driver.findElement(By.linkText("Admin")).click();
        driver.findElement(By.linkText("Reports")).click();
        driver.findElement(By.cssSelector(".btn:nth-child(2)")).click();

        // assert report completed message appears
        wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        WebElement alertElement = wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".alert.alert-warning")));
        String expectedMessage = "Report processed successfully.";
        String actualMessage = alertElement.getText();
        assertEquals(expectedMessage, actualMessage, "Alert message not as expected");


        driver.findElement(By.linkText("Files")).click();
        driver.findElement(By.cssSelector("tr:nth-child(5) .btn-info")).click();

        // assert download of xlsx file occurs

        // Wait for 5 seconds
        try {
            Thread.sleep(5000); // Wait for 5 seconds
        } catch (InterruptedException e) {
            // do nothing, no consequences if interrupted - test may just fail
        }

        // Check that downloads contains one excel file
        int xlsxFileCount = 0;
        File downloadDir = new File(downloadPath);
        files = downloadDir.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.getName().endsWith(".xlsx")) {
                    xlsxFileCount++;
                }
            }
        }
        assertEquals(1, xlsxFileCount, "Expected to download one xlsx file. Instead downloaded " + xlsxFileCount + " xlsx files.");
    }
}
